That’s a wild one, Chris — especially if **password fields work but text/email inputs don’t.** Since you already ruled out Radix, styles, and modal structure, here’s a **tight list of suspects**:

---

### 🔒 1. **Autofocus or Programmatic Focus Stealing**

If another element (like the password field or close button) is stealing focus **right after** the modal opens, your text/email inputs might never activate.

✅ **Fix:** Add a `ref` + `useEffect` to explicitly focus the username input:

```tsx
const usernameRef = useRef(null);

useEffect(() => {
  usernameRef.current?.focus();
}, []);
```

Also: Make sure **no other element is calling `focus()`** after that.

---

### 👻 2. **Pointer Events or Z-Index Issues**

Check if an **invisible overlay** or rogue div is **blocking interaction** with just the text/email fields.

✅ **Fix:** In DevTools, inspect the username input and:

* Toggle the "Elements" tab
* Turn off layers above the input
* Look for anything with `pointer-events: none | auto`
* Check for any sibling elements absolutely positioned above it

---

### 🧱 3. **JS Event Suppression (onKeyDown / preventDefault)**

If you're using a `keydown` handler *above* the input (maybe at the modal level), you might be accidentally `e.preventDefault()`ing all typing — but password fields use a different path (like masked input logic).

✅ **Fix:** Check for:

```tsx
useEffect(() => {
  const handler = (e) => {
    if (e.key === "Tab") e.preventDefault(); // or something else
  };
  window.addEventListener("keydown", handler);
  return () => window.removeEventListener("keydown", handler);
}, []);
```

If this exists, **limit it to specific keys** only.

---

### 🧪 4. **Field Type Confusion or Conflicting Props**

If you’re accidentally passing `type="text"` but also some Radix or third-party prop that overrides or disables input... it might render, but not respond.

✅ **Fix:** Strip it down to this:

```tsx
<input
  type="text"
  name="username"
  ref={usernameRef}
  className="border p-2"
  onChange={(e) => console.log(e.target.value)}
/>
```

If that works in isolation — start layering back your other props.

---

### 🧬 5. **Controlled Input State Bug**

If you’re using a state hook but it’s misconfigured (like `value` without `onChange`), React will render the input as **read-only**.

✅ **Fix:**

```tsx
const [email, setEmail] = useState("");

<input
  type="email"
  value={email} // ← If this exists...
  onChange={(e) => setEmail(e.target.value)} // ← ...this must exist too
/>
```

---

Want to paste your full modal + input code? I’ll pinpoint it in seconds. This is 99% one of the above.
